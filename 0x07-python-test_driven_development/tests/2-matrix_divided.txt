The module '2-matrix_divided'
============================

Test function: 'matrix_divided'
-----------------------------

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

'Valid Arguments'
>>> matrix_divided([[13]], 2)
[[6.5]]

>>> matrix_divided([[10, 8]], 2.5)
[[4, 3.2]]

>>> matrix_divided([[10, 8], [4.6, 2.1]], 2.5)
[[5, 3.2], [1.84, 0.84]]

>>> matrix_divided([[10, 8], [4.6, 2.1]], -2.5)
[[-5, -3.2], [-1.84, -0.84]]

'Invalid div argument'
>>> matrix_divided([[10, 8], [2.1]], True)
Traceback ('most recent call last'):
...
TypeError: div must be a number 

>>> matrix_divided([[10, 8], [2.1]], "alx")
Traceback ('most recent call last'):
...
TypeError: div must be a number

>>> matrix_divided([[10, 8], [2.1]], 0)
Traceback ('most recent call last'):
...
ZeroDivisionError: division by zero

'Invalid matrix argument'
>>> matrix_divided([[]], 2)
Traceback ('most recent call last'):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([["alx"]], 2)
Traceback ('most recent call last'):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[True]], 2)
Traceback ('most recent call last'):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[[1]]], 2)
Traceback ('most recent call last'):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

'Inf Argument'
>>> matrix_divided([[float(inf)]], 2)
Traceback ('most recent call last'):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

'Not a number Argument'
>>> matrix_divided([[float(NaN)]], 2)
Traceback ('most recent call last'):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

'Invalid Row size'
>>> matrix_divided([[10, 8], [2.1]], 2.5)
Traceback ('most recent call last'):
...
TypeError: Each row of the matrix must have the same size 

