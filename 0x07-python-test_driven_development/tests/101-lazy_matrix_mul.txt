========================================================================
'Test for 101-lazy_matrix_mul module'
========================================================================
'Funtion to test:   lazy_matrix_mul(m_a, m_b)'
========================================================================

>>> lazy_matrix_mul = __import__("101-lazy_matrix_mul").lazy_matrix_mul

'module docstring'
>>> m = __import__("101-lazy_matrix_mul").__doc__
>>> len(m) > 1
True

'function docstring'
>>> f = __import__("101-lazy_matrix_mul").lazy_matrix_mul.__doc__
>>> len(f) > 1
True

'empty args'
>>> lazy_matrix_mul()
Traceback (most recent call last):
...
TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

'only one arg'
>>> lazy_matrix_mul([[2, 7]])
Traceback (most recent call last):
...
TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

'more than 2 args'
>>> lazy_matrix_mul([[1, 2]], [[8]], [[12]])
Traceback (most recent call last):
...
TypeError: lazy_matrix_mul() takes 2 positional arguments but 3 were given

'Matrix of integers'
>>> print(lazy_matrix_mul([[3, 4], [6, 5]], [[8], [7]]))
[[52]
 [83]]

'Matrix of float'
>>> print(lazy_matrix_mul([[3.6, -4.5], [-6, 5-3]], [[-0.8], [1.7]]))
[[-10.53]
 [  8.2 ]]

'm_a is not a list of integers or floats'
>>> lazy_matrix_mul(True, [[8, 7]])
Traceback (most recent call last):
...
ValueError: Scalar operands are not allowed, use '*' instead

'm_b is not a list of integers or floats'
>>> lazy_matrix_mul([[3, 4], [6, 5]], 3)
Traceback (most recent call last):
...
ValueError: Scalar operands are not allowed, use '*' instead

'm_a is not a list of integers or floats'
>>> lazy_matrix_mul((2, 5, 6), [[8, 7]])
Traceback (most recent call last):
...
ValueError: shapes (3,) and (1,2) not aligned: 3 (dim 0) != 1 (dim 0)

'm_b is not a list of integers or floats'
>>> lazy_matrix_mul([[3, 4], [6, 5]], "Meco")
Traceback (most recent call last):
...
ValueError: Scalar operands are not allowed, use '*' instead

'm_a is not a list of lists of integers'
>>> lazy_matrix_mul([3, 4, 6, 5], [[8, 7]])
Traceback (most recent call last):
...
ValueError: shapes (4,) and (1,2) not aligned: 4 (dim 0) != 1 (dim 0)

'm_b is not a list of lists of integers'
>>> lazy_matrix_mul([[3, 4.3, 6.5, 5]], ["Meco", 7])
Traceback (most recent call last):
...
ValueError: shapes (1,4) and (2,) not aligned: 4 (dim 1) != 2 (dim 0)

'm_a is an empty list'
>>> lazy_matrix_mul([], ["Meco", 7])
Traceback (most recent call last):
...
ValueError: shapes (0,) and (2,) not aligned: 0 (dim 0) != 2 (dim 0)

'm_b is an empty list of lists'
>>> lazy_matrix_mul([[3, 4.3, 6.5, 5]], [[]])
Traceback (most recent call last):
...
ValueError: shapes (1,4) and (1,0) not aligned: 4 (dim 1) != 1 (dim 0)

'm_a is a list of lists but not a matrix'
>>> lazy_matrix_mul([[3, -4.3], [-6.5, 5, -7]], [[4, 7]])
Traceback (most recent call last):
...
ValueError: setting an array element with a sequence.
